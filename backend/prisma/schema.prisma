generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  name             String         @db.VarChar(255)
  email            String         @unique @db.VarChar(255)
  password         String         @db.VarChar(255)
  role             Role
  companyName      String?        @db.VarChar(255)
  isActive         Boolean        @default(true)
  createdById      Int?
  lastLoginAt      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  customRole       String?        @db.VarChar(100)
  companyAddress   String?        @db.Text
  companyPhone     String?        @db.VarChar(20)
  isSuspended      Boolean        @default(false)
  suspendedAt      DateTime?
  suspendedBy      Int?
  suspensionReason String?        @db.VarChar(500)
  unsuspendedAt    DateTime?
  unsuspendedBy    Int?
  subUserLimit     Int            @default(5)
  auditLogs        AuditLog[]
  refreshTokens    RefreshToken[]
  projects         UserProject[]
  createdBy        User?          @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers     User[]         @relation("UserCreatedBy")

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([isSuspended])
  @@index([createdById])
  @@index([suspendedBy])
  @@index([companyName])
  @@map("users")
}

model Project {
  id              Int           @id @default(autoincrement())
  customProjectId String        @unique @db.VarChar(50)
  name            String        @db.VarChar(255)
  icon            String?       @db.VarChar(100)
  description     String?       @db.Text
  projectUrl      String        @db.VarChar(500)
  isActive        Boolean       @default(true)
  createdBy       Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  auditLogs       AuditLog[]
  users           UserProject[]

  @@index([customProjectId])
  @@index([name])
  @@index([isActive])
  @@index([createdBy])
  @@map("projects")
}

model UserProject {
  userId       Int
  projectId    Int
  assignedAt   DateTime  @default(now())
  isActive     Boolean   @default(true)
  lastAccessed DateTime?
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@index([isActive])
  @@map("user_projects")
}

model OtpRequest {
  id        Int        @id @default(autoincrement())
  email     String     @db.VarChar(255)
  otp       String     @db.VarChar(10)
  purpose   OtpPurpose
  expiresAt DateTime
  isUsed    Boolean    @default(false)
  createdAt DateTime   @default(now())

  @@index([email])
  @@index([expiresAt])
  @@index([purpose])
  @@index([isUsed])
  @@map("otp_requests")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.VarChar(500)
  userId    Int
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@index([isRevoked])
  @@map("refresh_tokens")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String   @db.VarChar(100)
  resource  String?  @db.VarChar(50)
  projectId Int?
  details   Json?
  ipAddress String?  @db.VarChar(45)
  userAgent String?  @db.Text
  success   Boolean  @default(true)
  createdAt DateTime @default(now())
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([projectId])
  @@index([success])
  @@index([createdAt])
  @@map("audit_logs")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  SUB_USER
}

enum OtpPurpose {
  REGISTRATION
  FORGOT_PASSWORD
  ACCOUNT_ACTIVATION
}
